{
  "1.1": "True",
  "2.1": "False",
  "2.2": "False",
  "2.3": "False",
  "3.1": "True",
  "3.2": "{'admin': \"'MongoAdmin'{ role: 'root', db: 'admin' } ,'MongoAdmin2'{ role: 'root', db: 'admin' } ,\", 'local': '', 'config': ''}",
  "3.3": "mongod.exe                   28816 Console                    1    121,212 K\n",
  "3.4": "Current Mongosh Log ID:\t651e65d0cec2e61486e322ea\nConnecting to:\t\tmongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.0.0\nUsing MongoDB:\t\t7.0.1\nUsing Mongosh:\t\t2.0.0\nmongosh 2.0.1 is available for download: https://www.mongodb.com/try/download/shell\n\nFor mongosh info see: \u001b[1mhttps://docs.mongodb.com/mongodb-shell/\u001b[0m\n\n------\n   The server generated these startup warnings when booting\n   2023-10-04T18:08:00.537+03:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted\n------\n\n{\n  roles: [\n    {\n      role: 'root',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { db: 'config', collection: '' },\n          actions: [\n            'analyzeShardKey',\n            'bypassDocumentValidation',\n            'changeCustomData',\n            'changePassword',\n            'changeStream',\n            'clearJumboFlag',\n            'collMod',\n            'collStats',\n            'configureQueryAnalyzer',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createRole',\n            'createSearchIndexes',\n            'createUser',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropRole',\n            'dropUser',\n            'enableSharding',\n            'find',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'grantRole',\n            'indexStats',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'moveChunk',\n            'planCacheRead',\n            'refineCollectionShardKey',\n            'remove',\n            'reshardCollection',\n            'revokeRole',\n            'setAuthenticationRestriction',\n            'splitChunk',\n            'splitVector',\n            'update',\n            'viewRole',\n            'viewUser'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: '' },\n          actions: [\n            'analyzeShardKey',\n            'bypassDocumentValidation',\n            'changeCustomData',\n            'changePassword',\n            'changeStream',\n            'clearJumboFlag',\n            'collMod',\n            'collStats',\n            'configureQueryAnalyzer',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createRole',\n            'createSearchIndexes',\n            'createUser',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropRole',\n            'dropUser',\n            'enableSharding',\n            'find',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'grantRole',\n            'indexStats',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'moveChunk',\n            'planCacheRead',\n            'refineCollectionShardKey',\n            'remove',\n            'reshardCollection',\n            'revokeRole',\n            'setAuthenticationRestriction',\n            'splitChunk',\n            'splitVector',\n            'update',\n            'viewRole',\n            'viewUser'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { cluster: true },\n          actions: [\n            'addShard',\n            'allCollectionStats',\n            'appendOplogNote',\n            'applicationMessage',\n            'auditConfigure',\n            'authSchemaUpgrade',\n            'bypassWriteBlockingMode',\n            'checkFreeMonitoringStatus',\n            'checkMetadataConsistency',\n            'cleanupOrphaned',\n            'connPoolStats',\n            'connPoolSync',\n            'dropConnections',\n            'flushRouterConfig',\n            'forceUUID',\n            'fsync',\n            'getClusterParameter',\n            'getDefaultRWConcern',\n            'getCmdLineOpts',\n            'getLog',\n            'getParameter',\n            'getShardMap',\n            'hostInfo',\n            'inprog',\n            'invalidateUserCache',\n            'issueDirectShardOperations',\n            'killAnyCursor',\n            'killAnySession',\n            'killop',\n            'listDatabases',\n            'listSampledQueries',\n            'listSessions',\n            'listShards',\n            'logRotate',\n            'netstat',\n            'oidcListKeys',\n            'oidcRefreshKeys',\n            'oidReset',\n            'operationMetrics',\n            'telemetryRead',\n            'removeShard',\n            'replSetConfigure',\n            'replSetGetConfig',\n            'replSetGetStatus',\n            'replSetResizeOplog',\n            'replSetStateChange',\n            'resync',\n            'rotateCertificates',\n            'runTenantMigration',\n            'serverStatus',\n            'setClusterParameter',\n            'setDefaultRWConcern',\n            'setFeatureCompatibilityVersion',\n            'setFreeMonitoring',\n            'setParameter',\n            'setUserWriteBlockMode',\n            'shardedDataDistribution',\n            'shardingState',\n            'shutdown',\n            'top',\n            'touch',\n            'trafficRecord',\n            'transitionFromDedicatedConfigServer',\n            'transitionToDedicatedConfigServer',\n            'unlock',\n            'useTenant',\n            'useUUID',\n            'viewUser',\n            'applyOps',\n            'setChangeStreamState',\n            'getChangeStreamState'\n          ]\n        },\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'analyze',\n            'analyzeShardKey',\n            'bypassDocumentValidation',\n            'changeCustomData',\n            'changePassword',\n            'changeStream',\n            'clearJumboFlag',\n            'collMod',\n            'collStats',\n            'compact',\n            'compactStructuredEncryptionData',\n            'configureQueryAnalyzer',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createRole',\n            'createSearchIndexes',\n            'createUser',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropDatabase',\n            'dropIndex',\n            'dropRole',\n            'dropSearchIndex',\n            'dropUser',\n            'enableProfiler',\n            'enableSharding',\n            'find',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'grantRole',\n            'indexStats',\n            'insert',\n            'killCursors',\n            'listCachedAndActiveUsers',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'moveChunk',\n            'planCacheIndexFilter',\n            'planCacheRead',\n            'planCacheWrite',\n            'refineCollectionShardKey',\n            'reIndex',\n            'remove',\n            'renameCollectionSameDB',\n            'reshardCollection',\n            'revokeRole',\n            'setAuthenticationRestriction',\n            'splitChunk',\n            'splitVector',\n            'storageDetails',\n            'update',\n            'validate',\n            'viewRole',\n            'viewUser'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: 'system.sessions' },\n          actions: [\n            'collStats',\n            'dbStats',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'indexStats'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.replset' },\n          actions: [\n            'bypassDocumentValidation',\n            'changeStream',\n            'collMod',\n            'collStats',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.election' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'find',\n            'insert',\n            'updateSearchIndex',\n            'remove',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.minvalid' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'find',\n            'insert',\n            'updateSearchIndex',\n            'remove',\n            'update'\n          ]\n        },\n        {\n          resource: { db: '', collection: 'system.profile' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'convertToCapped',\n            'createCollection',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { system_buckets: '' },\n          actions: [\n            'analyze',\n            'analyzeShardKey',\n            'bypassDocumentValidation',\n            'changeStream',\n            'clearJumboFlag',\n            'collMod',\n            'collStats',\n            'compact',\n            'compactStructuredEncryptionData',\n            'configureQueryAnalyzer',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropDatabase',\n            'dropIndex',\n            'dropSearchIndex',\n            'enableProfiler',\n            'enableSharding',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'moveChunk',\n            'planCacheIndexFilter',\n            'planCacheRead',\n            'planCacheWrite',\n            'refineCollectionShardKey',\n            'reIndex',\n            'remove',\n            'renameCollectionSameDB',\n            'reshardCollection',\n            'splitChunk',\n            'splitVector',\n            'storageDetails',\n            'update',\n            'validate'\n          ]\n        },\n        {\n          resource: { anyResource: true },\n          actions: [\n            'collStats',\n            'dbCheck',\n            'exportCollection',\n            'importCollection',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'validate'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.healthlog' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.users' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.roles' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: '', collection: 'system.users' },\n          actions: [\n            'bypassDocumentValidation',\n            'changeStream',\n            'collMod',\n            'collStats',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead',\n            'remove',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.version' },\n          actions: [\n            'bypassDocumentValidation',\n            'changeStream',\n            'collMod',\n            'collStats',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.backup_users' },\n          actions: [\n            'bypassDocumentValidation',\n            'changeStream',\n            'collMod',\n            'collStats',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: '', collection: 'system.js' },\n          actions: [\n            'bypassDocumentValidation',\n            'changeStream',\n            'collMod',\n            'collStats',\n            'compactStructuredEncryptionData',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead',\n            'remove',\n            'renameCollectionSameDB',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: 'settings' },\n          actions: [ 'find', 'insert', 'update' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'tempusers' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'temproles' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'config', collection: 'system.preimages' },\n          actions: [ 'find', 'remove' ]\n        },\n        {\n          resource: { db: 'config', collection: 'system.change_collection' },\n          actions: [ 'find', 'insert', 'remove', 'update' ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { db: 'config', collection: '' },\n          actions: [\n            'analyzeShardKey',\n            'bypassDocumentValidation',\n            'changeCustomData',\n            'changePassword',\n            'changeStream',\n            'clearJumboFlag',\n            'collMod',\n            'collStats',\n            'configureQueryAnalyzer',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createRole',\n            'createSearchIndexes',\n            'createUser',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropRole',\n            'dropUser',\n            'enableSharding',\n            'find',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'grantRole',\n            'indexStats',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'moveChunk',\n            'planCacheRead',\n            'refineCollectionShardKey',\n            'remove',\n            'reshardCollection',\n            'revokeRole',\n            'setAuthenticationRestriction',\n            'splitChunk',\n            'splitVector',\n            'update',\n            'viewRole',\n            'viewUser'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: '' },\n          actions: [\n            'analyzeShardKey',\n            'bypassDocumentValidation',\n            'changeCustomData',\n            'changePassword',\n            'changeStream',\n            'clearJumboFlag',\n            'collMod',\n            'collStats',\n            'configureQueryAnalyzer',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createRole',\n            'createSearchIndexes',\n            'createUser',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropRole',\n            'dropUser',\n            'enableSharding',\n            'find',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'grantRole',\n            'indexStats',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'moveChunk',\n            'planCacheRead',\n            'refineCollectionShardKey',\n            'remove',\n            'reshardCollection',\n            'revokeRole',\n            'setAuthenticationRestriction',\n            'splitChunk',\n            'splitVector',\n            'update',\n            'viewRole',\n            'viewUser'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { cluster: true },\n          actions: [\n            'addShard',\n            'allCollectionStats',\n            'appendOplogNote',\n            'applicationMessage',\n            'auditConfigure',\n            'authSchemaUpgrade',\n            'bypassWriteBlockingMode',\n            'checkFreeMonitoringStatus',\n            'checkMetadataConsistency',\n            'cleanupOrphaned',\n            'connPoolStats',\n            'connPoolSync',\n            'dropConnections',\n            'flushRouterConfig',\n            'forceUUID',\n            'fsync',\n            'getClusterParameter',\n            'getDefaultRWConcern',\n            'getCmdLineOpts',\n            'getLog',\n            'getParameter',\n            'getShardMap',\n            'hostInfo',\n            'inprog',\n            'invalidateUserCache',\n            'issueDirectShardOperations',\n            'killAnyCursor',\n            'killAnySession',\n            'killop',\n            'listDatabases',\n            'listSampledQueries',\n            'listSessions',\n            'listShards',\n            'logRotate',\n            'netstat',\n            'oidcListKeys',\n            'oidcRefreshKeys',\n            'oidReset',\n            'operationMetrics',\n            'telemetryRead',\n            'removeShard',\n            'replSetConfigure',\n            'replSetGetConfig',\n            'replSetGetStatus',\n            'replSetResizeOplog',\n            'replSetStateChange',\n            'resync',\n            'rotateCertificates',\n            'runTenantMigration',\n            'serverStatus',\n            'setClusterParameter',\n            'setDefaultRWConcern',\n            'setFeatureCompatibilityVersion',\n            'setFreeMonitoring',\n            'setParameter',\n            'setUserWriteBlockMode',\n            'shardedDataDistribution',\n            'shardingState',\n            'shutdown',\n            'top',\n            'touch',\n            'trafficRecord',\n            'transitionFromDedicatedConfigServer',\n            'transitionToDedicatedConfigServer',\n            'unlock',\n            'useTenant',\n            'useUUID',\n            'viewUser',\n            'applyOps',\n            'setChangeStreamState',\n            'getChangeStreamState'\n          ]\n        },\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'analyze',\n            'analyzeShardKey',\n            'bypassDocumentValidation',\n            'changeCustomData',\n            'changePassword',\n            'changeStream',\n            'clearJumboFlag',\n            'collMod',\n            'collStats',\n            'compact',\n            'compactStructuredEncryptionData',\n            'configureQueryAnalyzer',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createRole',\n            'createSearchIndexes',\n            'createUser',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropDatabase',\n            'dropIndex',\n            'dropRole',\n            'dropSearchIndex',\n            'dropUser',\n            'enableProfiler',\n            'enableSharding',\n            'find',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'grantRole',\n            'indexStats',\n            'insert',\n            'killCursors',\n            'listCachedAndActiveUsers',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'moveChunk',\n            'planCacheIndexFilter',\n            'planCacheRead',\n            'planCacheWrite',\n            'refineCollectionShardKey',\n            'reIndex',\n            'remove',\n            'renameCollectionSameDB',\n            'reshardCollection',\n            'revokeRole',\n            'setAuthenticationRestriction',\n            'splitChunk',\n            'splitVector',\n            'storageDetails',\n            'update',\n            'validate',\n            'viewRole',\n            'viewUser'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: 'system.sessions' },\n          actions: [\n            'collStats',\n            'dbStats',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'indexStats'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.replset' },\n          actions: [\n            'bypassDocumentValidation',\n            'changeStream',\n            'collMod',\n            'collStats',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.election' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'find',\n            'insert',\n            'updateSearchIndex',\n            'remove',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.minvalid' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'find',\n            'insert',\n            'updateSearchIndex',\n            'remove',\n            'update'\n          ]\n        },\n        {\n          resource: { db: '', collection: 'system.profile' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'convertToCapped',\n            'createCollection',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { system_buckets: '' },\n          actions: [\n            'analyze',\n            'analyzeShardKey',\n            'bypassDocumentValidation',\n            'changeStream',\n            'clearJumboFlag',\n            'collMod',\n            'collStats',\n            'compact',\n            'compactStructuredEncryptionData',\n            'configureQueryAnalyzer',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropDatabase',\n            'dropIndex',\n            'dropSearchIndex',\n            'enableProfiler',\n            'enableSharding',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'moveChunk',\n            'planCacheIndexFilter',\n            'planCacheRead',\n            'planCacheWrite',\n            'refineCollectionShardKey',\n            'reIndex',\n            'remove',\n            'renameCollectionSameDB',\n            'reshardCollection',\n            'splitChunk',\n            'splitVector',\n            'storageDetails',\n            'update',\n            'validate'\n          ]\n        },\n        {\n          resource: { anyResource: true },\n          actions: [\n            'collStats',\n            'dbCheck',\n            'exportCollection',\n            'importCollection',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'validate'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.healthlog' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.users' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.roles' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: '', collection: 'system.users' },\n          actions: [\n            'bypassDocumentValidation',\n            'changeStream',\n            'collMod',\n            'collStats',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead',\n            'remove',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.version' },\n          actions: [\n            'bypassDocumentValidation',\n            'changeStream',\n            'collMod',\n            'collStats',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.backup_users' },\n          actions: [\n            'bypassDocumentValidation',\n            'changeStream',\n            'collMod',\n            'collStats',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: '', collection: 'system.js' },\n          actions: [\n            'bypassDocumentValidation',\n            'changeStream',\n            'collMod',\n            'collStats',\n            'compactStructuredEncryptionData',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead',\n            'remove',\n            'renameCollectionSameDB',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: 'settings' },\n          actions: [ 'find', 'insert', 'update' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'tempusers' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'temproles' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'config', collection: 'system.preimages' },\n          actions: [ 'find', 'remove' ]\n        },\n        {\n          resource: { db: 'config', collection: 'system.change_collection' },\n          actions: [ 'find', 'insert', 'remove', 'update' ]\n        }\n      ]\n    },\n    {\n      role: 'hostManager',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { cluster: true },\n          actions: [\n            'applicationMessage',  'auditConfigure',\n            'connPoolSync',        'dropConnections',\n            'flushRouterConfig',   'fsync',\n            'invalidateUserCache', 'killAnyCursor',\n            'killAnySession',      'killop',\n            'logRotate',           'oidcListKeys',\n            'oidcRefreshKeys',     'oidReset',\n            'replSetResizeOplog',  'resync',\n            'rotateCertificates',  'setParameter',\n            'shutdown',            'touch',\n            'trafficRecord',       'unlock'\n          ]\n        },\n        {\n          resource: { db: '', collection: '' },\n          actions: [ 'killCursors' ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { cluster: true },\n          actions: [\n            'applicationMessage',  'auditConfigure',\n            'connPoolSync',        'dropConnections',\n            'flushRouterConfig',   'fsync',\n            'invalidateUserCache', 'killAnyCursor',\n            'killAnySession',      'killop',\n            'logRotate',           'oidcListKeys',\n            'oidcRefreshKeys',     'oidReset',\n            'replSetResizeOplog',  'resync',\n            'rotateCertificates',  'setParameter',\n            'shutdown',            'touch',\n            'trafficRecord',       'unlock'\n          ]\n        },\n        {\n          resource: { db: '', collection: '' },\n          actions: [ 'killCursors' ]\n        }\n      ]\n    },\n    {\n      role: 'enableSharding',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'analyzeShardKey',\n            'enableSharding',\n            'refineCollectionShardKey',\n            'reshardCollection'\n          ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'analyzeShardKey',\n            'enableSharding',\n            'refineCollectionShardKey',\n            'reshardCollection'\n          ]\n        }\n      ]\n    },\n    {\n      role: 'readWriteAnyDatabase',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'compactStructuredEncryptionData',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead',\n            'remove',\n            'renameCollectionSameDB',\n            'update'\n          ]\n        },\n        { resource: { cluster: true }, actions: [ 'listDatabases' ] },\n        {\n          resource: { db: '', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'compactStructuredEncryptionData',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead',\n            'remove',\n            'renameCollectionSameDB',\n            'update'\n          ]\n        },\n        {\n          resource: { system_buckets: '' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'compactStructuredEncryptionData',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead',\n            'remove',\n            'renameCollectionSameDB',\n            'update'\n          ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'compactStructuredEncryptionData',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead',\n            'remove',\n            'renameCollectionSameDB',\n            'update'\n          ]\n        },\n        { resource: { cluster: true }, actions: [ 'listDatabases' ] },\n        {\n          resource: { db: '', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'compactStructuredEncryptionData',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead',\n            'remove',\n            'renameCollectionSameDB',\n            'update'\n          ]\n        },\n        {\n          resource: { system_buckets: '' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'compactStructuredEncryptionData',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead',\n            'remove',\n            'renameCollectionSameDB',\n            'update'\n          ]\n        }\n      ]\n    },\n    {\n      role: 'restore',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { cluster: true },\n          actions: [\n            'bypassWriteBlockingMode',\n            'forceUUID',\n            'getParameter',\n            'setUserWriteBlockMode',\n            'useUUID',\n            'applyOps'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: '' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'insert',\n            'updateSearchIndex'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: '' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'insert',\n            'updateSearchIndex'\n          ]\n        },\n        {\n          resource: { system_buckets: '' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'insert',\n            'updateSearchIndex'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.replset' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'insert',\n            'updateSearchIndex'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.election' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'insert',\n            'updateSearchIndex'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.minvalid' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'insert',\n            'updateSearchIndex'\n          ]\n        },\n        {\n          resource: { anyResource: true },\n          actions: [ 'listCollections' ]\n        },\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'bypassDocumentValidation',\n            'changeCustomData',\n            'changePassword',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createRole',\n            'createSearchIndexes',\n            'createUser',\n            'dropCollection',\n            'dropRole',\n            'dropUser',\n            'grantRole',\n            'insert',\n            'updateSearchIndex',\n            'revokeRole',\n            'setAuthenticationRestriction',\n            'viewRole',\n            'viewUser'\n          ]\n        },\n        {\n          resource: { db: '', collection: 'system.js' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'insert',\n            'updateSearchIndex'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'tempusers' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'temproles' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.backup_users' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'insert',\n            'updateSearchIndex'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.version' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'find',\n            'insert',\n            'updateSearchIndex'\n          ]\n        },\n        {\n          resource: { db: '', collection: 'system.users' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'find',\n            'insert',\n            'updateSearchIndex',\n            'remove',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.roles' },\n          actions: [ 'createIndex' ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { cluster: true },\n          actions: [\n            'bypassWriteBlockingMode',\n            'forceUUID',\n            'getParameter',\n            'setUserWriteBlockMode',\n            'useUUID',\n            'applyOps'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: '' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'insert',\n            'updateSearchIndex'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: '' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'insert',\n            'updateSearchIndex'\n          ]\n        },\n        {\n          resource: { system_buckets: '' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'insert',\n            'updateSearchIndex'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.replset' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'insert',\n            'updateSearchIndex'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.election' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'insert',\n            'updateSearchIndex'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.minvalid' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'insert',\n            'updateSearchIndex'\n          ]\n        },\n        {\n          resource: { anyResource: true },\n          actions: [ 'listCollections' ]\n        },\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'bypassDocumentValidation',\n            'changeCustomData',\n            'changePassword',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createRole',\n            'createSearchIndexes',\n            'createUser',\n            'dropCollection',\n            'dropRole',\n            'dropUser',\n            'grantRole',\n            'insert',\n            'updateSearchIndex',\n            'revokeRole',\n            'setAuthenticationRestriction',\n            'viewRole',\n            'viewUser'\n          ]\n        },\n        {\n          resource: { db: '', collection: 'system.js' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'insert',\n            'updateSearchIndex'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'tempusers' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'temproles' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.backup_users' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'insert',\n            'updateSearchIndex'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.version' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'find',\n            'insert',\n            'updateSearchIndex'\n          ]\n        },\n        {\n          resource: { db: '', collection: 'system.users' },\n          actions: [\n            'bypassDocumentValidation',\n            'collMod',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dropCollection',\n            'find',\n            'insert',\n            'updateSearchIndex',\n            'remove',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.roles' },\n          actions: [ 'createIndex' ]\n        }\n      ]\n    },\n    {\n      role: 'clusterMonitor',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { db: 'config', collection: '' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'indexStats',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: '' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'indexStats',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { cluster: true },\n          actions: [\n            'allCollectionStats',\n            'checkFreeMonitoringStatus',\n            'connPoolStats',\n            'getDefaultRWConcern',\n            'getCmdLineOpts',\n            'getLog',\n            'getParameter',\n            'getShardMap',\n            'hostInfo',\n            'inprog',\n            'listDatabases',\n            'listSampledQueries',\n            'listSessions',\n            'listShards',\n            'netstat',\n            'operationMetrics',\n            'replSetGetConfig',\n            'replSetGetStatus',\n            'serverStatus',\n            'shardedDataDistribution',\n            'shardingState',\n            'top',\n            'useUUID'\n          ]\n        },\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'collStats',\n            'dbStats',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'indexStats'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: 'system.sessions' },\n          actions: [\n            'collStats',\n            'dbStats',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'indexStats'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.replset' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.election' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.minvalid' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: '', collection: 'system.profile' },\n          actions: [ 'find' ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { db: 'config', collection: '' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'indexStats',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: '' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'indexStats',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { cluster: true },\n          actions: [\n            'allCollectionStats',\n            'checkFreeMonitoringStatus',\n            'connPoolStats',\n            'getDefaultRWConcern',\n            'getCmdLineOpts',\n            'getLog',\n            'getParameter',\n            'getShardMap',\n            'hostInfo',\n            'inprog',\n            'listDatabases',\n            'listSampledQueries',\n            'listSessions',\n            'listShards',\n            'netstat',\n            'operationMetrics',\n            'replSetGetConfig',\n            'replSetGetStatus',\n            'serverStatus',\n            'shardedDataDistribution',\n            'shardingState',\n            'top',\n            'useUUID'\n          ]\n        },\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'collStats',\n            'dbStats',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'indexStats'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: 'system.sessions' },\n          actions: [\n            'collStats',\n            'dbStats',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'indexStats'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.replset' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.election' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.minvalid' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: '', collection: 'system.profile' },\n          actions: [ 'find' ]\n        }\n      ]\n    },\n    {\n      role: 'dbAdmin',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { db: 'admin', collection: '' },\n          actions: [\n            'analyze',\n            'bypassDocumentValidation',\n            'collMod',\n            'collStats',\n            'compact',\n            'configureQueryAnalyzer',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbStats',\n            'dropCollection',\n            'dropDatabase',\n            'dropIndex',\n            'dropSearchIndex',\n            'enableProfiler',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheIndexFilter',\n            'planCacheRead',\n            'planCacheWrite',\n            'reIndex',\n            'renameCollectionSameDB',\n            'storageDetails',\n            'validate'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.profile' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'convertToCapped',\n            'createCollection',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { db: 'admin', collection: '' },\n          actions: [\n            'analyze',\n            'bypassDocumentValidation',\n            'collMod',\n            'collStats',\n            'compact',\n            'configureQueryAnalyzer',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbStats',\n            'dropCollection',\n            'dropDatabase',\n            'dropIndex',\n            'dropSearchIndex',\n            'enableProfiler',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheIndexFilter',\n            'planCacheRead',\n            'planCacheWrite',\n            'reIndex',\n            'renameCollectionSameDB',\n            'storageDetails',\n            'validate'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.profile' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'convertToCapped',\n            'createCollection',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        }\n      ]\n    },\n    {\n      role: 'userAdminAnyDatabase',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'changeCustomData',\n            'changePassword',\n            'createRole',\n            'createUser',\n            'dropRole',\n            'dropUser',\n            'grantRole',\n            'listCachedAndActiveUsers',\n            'revokeRole',\n            'setAuthenticationRestriction',\n            'viewRole',\n            'viewUser'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: '' },\n          actions: [\n            'changeCustomData',\n            'changePassword',\n            'createRole',\n            'createUser',\n            'dropRole',\n            'dropUser',\n            'grantRole',\n            'revokeRole',\n            'setAuthenticationRestriction',\n            'viewRole',\n            'viewUser'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: '' },\n          actions: [\n            'changeCustomData',\n            'changePassword',\n            'createRole',\n            'createUser',\n            'dropRole',\n            'dropUser',\n            'grantRole',\n            'revokeRole',\n            'setAuthenticationRestriction',\n            'viewRole',\n            'viewUser'\n          ]\n        },\n        {\n          resource: { cluster: true },\n          actions: [\n            'authSchemaUpgrade',\n            'invalidateUserCache',\n            'listDatabases',\n            'viewUser'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.users' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.roles' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: '', collection: 'system.users' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.version' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.backup_users' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'changeCustomData',\n            'changePassword',\n            'createRole',\n            'createUser',\n            'dropRole',\n            'dropUser',\n            'grantRole',\n            'listCachedAndActiveUsers',\n            'revokeRole',\n            'setAuthenticationRestriction',\n            'viewRole',\n            'viewUser'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: '' },\n          actions: [\n            'changeCustomData',\n            'changePassword',\n            'createRole',\n            'createUser',\n            'dropRole',\n            'dropUser',\n            'grantRole',\n            'revokeRole',\n            'setAuthenticationRestriction',\n            'viewRole',\n            'viewUser'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: '' },\n          actions: [\n            'changeCustomData',\n            'changePassword',\n            'createRole',\n            'createUser',\n            'dropRole',\n            'dropUser',\n            'grantRole',\n            'revokeRole',\n            'setAuthenticationRestriction',\n            'viewRole',\n            'viewUser'\n          ]\n        },\n        {\n          resource: { cluster: true },\n          actions: [\n            'authSchemaUpgrade',\n            'invalidateUserCache',\n            'listDatabases',\n            'viewUser'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.users' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.roles' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: '', collection: 'system.users' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.version' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.backup_users' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        }\n      ]\n    },\n    {\n      role: 'dbAdminAnyDatabase',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { cluster: true },\n          actions: [ 'listDatabases', 'applyOps' ]\n        },\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'analyze',\n            'bypassDocumentValidation',\n            'collMod',\n            'collStats',\n            'compact',\n            'configureQueryAnalyzer',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbStats',\n            'dropCollection',\n            'dropDatabase',\n            'dropIndex',\n            'dropSearchIndex',\n            'enableProfiler',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheIndexFilter',\n            'planCacheRead',\n            'planCacheWrite',\n            'reIndex',\n            'renameCollectionSameDB',\n            'storageDetails',\n            'validate'\n          ]\n        },\n        {\n          resource: { db: '', collection: 'system.profile' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'convertToCapped',\n            'createCollection',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { system_buckets: '' },\n          actions: [\n            'analyze',\n            'bypassDocumentValidation',\n            'collMod',\n            'collStats',\n            'compact',\n            'configureQueryAnalyzer',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbStats',\n            'dropCollection',\n            'dropDatabase',\n            'dropIndex',\n            'dropSearchIndex',\n            'enableProfiler',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheIndexFilter',\n            'planCacheRead',\n            'planCacheWrite',\n            'reIndex',\n            'renameCollectionSameDB',\n            'storageDetails',\n            'validate'\n          ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { cluster: true },\n          actions: [ 'listDatabases', 'applyOps' ]\n        },\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'analyze',\n            'bypassDocumentValidation',\n            'collMod',\n            'collStats',\n            'compact',\n            'configureQueryAnalyzer',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbStats',\n            'dropCollection',\n            'dropDatabase',\n            'dropIndex',\n            'dropSearchIndex',\n            'enableProfiler',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheIndexFilter',\n            'planCacheRead',\n            'planCacheWrite',\n            'reIndex',\n            'renameCollectionSameDB',\n            'storageDetails',\n            'validate'\n          ]\n        },\n        {\n          resource: { db: '', collection: 'system.profile' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'convertToCapped',\n            'createCollection',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { system_buckets: '' },\n          actions: [\n            'analyze',\n            'bypassDocumentValidation',\n            'collMod',\n            'collStats',\n            'compact',\n            'configureQueryAnalyzer',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbStats',\n            'dropCollection',\n            'dropDatabase',\n            'dropIndex',\n            'dropSearchIndex',\n            'enableProfiler',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheIndexFilter',\n            'planCacheRead',\n            'planCacheWrite',\n            'reIndex',\n            'renameCollectionSameDB',\n            'storageDetails',\n            'validate'\n          ]\n        }\n      ]\n    },\n    {\n      role: '__system',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [ { resource: { anyResource: true }, actions: [ 'anyAction' ] } ],\n      inheritedPrivileges: [ { resource: { anyResource: true }, actions: [ 'anyAction' ] } ]\n    },\n    {\n      role: 'clusterManager',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { db: 'config', collection: '' },\n          actions: [\n            'analyzeShardKey',\n            'changeStream',\n            'clearJumboFlag',\n            'collStats',\n            'configureQueryAnalyzer',\n            'dbHash',\n            'dbStats',\n            'enableSharding',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'moveChunk',\n            'planCacheRead',\n            'refineCollectionShardKey',\n            'remove',\n            'reshardCollection',\n            'splitChunk',\n            'splitVector',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { cluster: true },\n          actions: [\n            'addShard',\n            'appendOplogNote',\n            'applicationMessage',\n            'checkMetadataConsistency',\n            'cleanupOrphaned',\n            'flushRouterConfig',\n            'getClusterParameter',\n            'getDefaultRWConcern',\n            'listSessions',\n            'listShards',\n            'telemetryRead',\n            'removeShard',\n            'replSetConfigure',\n            'replSetGetConfig',\n            'replSetGetStatus',\n            'replSetStateChange',\n            'resync',\n            'runTenantMigration',\n            'setClusterParameter',\n            'setDefaultRWConcern',\n            'setFeatureCompatibilityVersion',\n            'setFreeMonitoring',\n            'transitionFromDedicatedConfigServer',\n            'transitionToDedicatedConfigServer',\n            'setChangeStreamState',\n            'getChangeStreamState'\n          ]\n        },\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'analyzeShardKey',\n            'clearJumboFlag',\n            'configureQueryAnalyzer',\n            'enableSharding',\n            'moveChunk',\n            'refineCollectionShardKey',\n            'reshardCollection',\n            'splitChunk',\n            'splitVector'\n          ]\n        },\n        {\n          resource: { system_buckets: '' },\n          actions: [\n            'analyzeShardKey',\n            'clearJumboFlag',\n            'configureQueryAnalyzer',\n            'enableSharding',\n            'moveChunk',\n            'refineCollectionShardKey',\n            'reshardCollection',\n            'splitChunk',\n            'splitVector'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: '' },\n          actions: [\n            'analyzeShardKey',\n            'clearJumboFlag',\n            'configureQueryAnalyzer',\n            'enableSharding',\n            'insert',\n            'moveChunk',\n            'refineCollectionShardKey',\n            'remove',\n            'reshardCollection',\n            'splitChunk',\n            'splitVector',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.replset' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        { resource: { anyResource: true }, actions: [ 'dbCheck' ] },\n        {\n          resource: { db: 'local', collection: 'system.healthlog' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.election' },\n          actions: [ 'insert', 'remove', 'update' ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.minvalid' },\n          actions: [ 'insert', 'remove', 'update' ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { db: 'config', collection: '' },\n          actions: [\n            'analyzeShardKey',\n            'changeStream',\n            'clearJumboFlag',\n            'collStats',\n            'configureQueryAnalyzer',\n            'dbHash',\n            'dbStats',\n            'enableSharding',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'moveChunk',\n            'planCacheRead',\n            'refineCollectionShardKey',\n            'remove',\n            'reshardCollection',\n            'splitChunk',\n            'splitVector',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { cluster: true },\n          actions: [\n            'addShard',\n            'appendOplogNote',\n            'applicationMessage',\n            'checkMetadataConsistency',\n            'cleanupOrphaned',\n            'flushRouterConfig',\n            'getClusterParameter',\n            'getDefaultRWConcern',\n            'listSessions',\n            'listShards',\n            'telemetryRead',\n            'removeShard',\n            'replSetConfigure',\n            'replSetGetConfig',\n            'replSetGetStatus',\n            'replSetStateChange',\n            'resync',\n            'runTenantMigration',\n            'setClusterParameter',\n            'setDefaultRWConcern',\n            'setFeatureCompatibilityVersion',\n            'setFreeMonitoring',\n            'transitionFromDedicatedConfigServer',\n            'transitionToDedicatedConfigServer',\n            'setChangeStreamState',\n            'getChangeStreamState'\n          ]\n        },\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'analyzeShardKey',\n            'clearJumboFlag',\n            'configureQueryAnalyzer',\n            'enableSharding',\n            'moveChunk',\n            'refineCollectionShardKey',\n            'reshardCollection',\n            'splitChunk',\n            'splitVector'\n          ]\n        },\n        {\n          resource: { system_buckets: '' },\n          actions: [\n            'analyzeShardKey',\n            'clearJumboFlag',\n            'configureQueryAnalyzer',\n            'enableSharding',\n            'moveChunk',\n            'refineCollectionShardKey',\n            'reshardCollection',\n            'splitChunk',\n            'splitVector'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: '' },\n          actions: [\n            'analyzeShardKey',\n            'clearJumboFlag',\n            'configureQueryAnalyzer',\n            'enableSharding',\n            'insert',\n            'moveChunk',\n            'refineCollectionShardKey',\n            'remove',\n            'reshardCollection',\n            'splitChunk',\n            'splitVector',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.replset' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        { resource: { anyResource: true }, actions: [ 'dbCheck' ] },\n        {\n          resource: { db: 'local', collection: 'system.healthlog' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.election' },\n          actions: [ 'insert', 'remove', 'update' ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.minvalid' },\n          actions: [ 'insert', 'remove', 'update' ]\n        }\n      ]\n    },\n    {\n      role: 'userAdmin',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { db: 'admin', collection: '' },\n          actions: [\n            'changeCustomData',\n            'changePassword',\n            'createRole',\n            'createUser',\n            'dropRole',\n            'dropUser',\n            'grantRole',\n            'revokeRole',\n            'setAuthenticationRestriction',\n            'viewRole',\n            'viewUser'\n          ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { db: 'admin', collection: '' },\n          actions: [\n            'changeCustomData',\n            'changePassword',\n            'createRole',\n            'createUser',\n            'dropRole',\n            'dropUser',\n            'grantRole',\n            'revokeRole',\n            'setAuthenticationRestriction',\n            'viewRole',\n            'viewUser'\n          ]\n        }\n      ]\n    },\n    {\n      role: '__queryableBackup',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { anyResource: true },\n          actions: [\n            'collStats',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes'\n          ]\n        },\n        { resource: { db: '', collection: '' }, actions: [ 'find' ] },\n        { resource: { system_buckets: '' }, actions: [ 'find' ] },\n        {\n          resource: { cluster: true },\n          actions: [ 'getParameter', 'listDatabases', 'useUUID' ]\n        },\n        {\n          resource: { db: 'config', collection: '' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'local', collection: '' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.election' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.minvalid' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: '', collection: 'system.js' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: '', collection: 'system.users' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: '', collection: 'system.profile' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.backup_users' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.roles' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.version' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'config', collection: 'settings' },\n          actions: [ 'find' ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { anyResource: true },\n          actions: [\n            'collStats',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes'\n          ]\n        },\n        { resource: { db: '', collection: '' }, actions: [ 'find' ] },\n        { resource: { system_buckets: '' }, actions: [ 'find' ] },\n        {\n          resource: { cluster: true },\n          actions: [ 'getParameter', 'listDatabases', 'useUUID' ]\n        },\n        {\n          resource: { db: 'config', collection: '' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'local', collection: '' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.election' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.minvalid' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: '', collection: 'system.js' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: '', collection: 'system.users' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: '', collection: 'system.profile' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.backup_users' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.roles' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.version' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'config', collection: 'settings' },\n          actions: [ 'find' ]\n        }\n      ]\n    },\n    {\n      role: 'read',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { db: 'admin', collection: '' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { db: 'admin', collection: '' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        }\n      ]\n    },\n    {\n      role: 'directShardOperations',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { cluster: true },\n          actions: [ 'issueDirectShardOperations' ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { cluster: true },\n          actions: [ 'issueDirectShardOperations' ]\n        }\n      ]\n    },\n    {\n      role: 'backup',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { anyResource: true },\n          actions: [\n            'collStats',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes'\n          ]\n        },\n        { resource: { db: '', collection: '' }, actions: [ 'find' ] },\n        { resource: { system_buckets: '' }, actions: [ 'find' ] },\n        {\n          resource: { cluster: true },\n          actions: [\n            'appendOplogNote',\n            'getParameter',\n            'listDatabases',\n            'serverStatus',\n            'setUserWriteBlockMode',\n            'useUUID'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: '' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'local', collection: '' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.election' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.minvalid' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: '', collection: 'system.js' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: '', collection: 'system.users' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: '', collection: 'system.profile' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.backup_users' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.roles' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.version' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'config', collection: 'settings' },\n          actions: [ 'find', 'insert', 'update' ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { anyResource: true },\n          actions: [\n            'collStats',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes'\n          ]\n        },\n        { resource: { db: '', collection: '' }, actions: [ 'find' ] },\n        { resource: { system_buckets: '' }, actions: [ 'find' ] },\n        {\n          resource: { cluster: true },\n          actions: [\n            'appendOplogNote',\n            'getParameter',\n            'listDatabases',\n            'serverStatus',\n            'setUserWriteBlockMode',\n            'useUUID'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: '' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'local', collection: '' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.election' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.minvalid' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: '', collection: 'system.js' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: '', collection: 'system.users' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: '', collection: 'system.profile' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.backup_users' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.roles' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.version' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { db: 'config', collection: 'settings' },\n          actions: [ 'find', 'insert', 'update' ]\n        }\n      ]\n    },\n    {\n      role: 'clusterAdmin',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { db: 'config', collection: '' },\n          actions: [\n            'analyzeShardKey',\n            'changeStream',\n            'clearJumboFlag',\n            'collStats',\n            'configureQueryAnalyzer',\n            'dbHash',\n            'dbStats',\n            'enableSharding',\n            'find',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'indexStats',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'moveChunk',\n            'planCacheRead',\n            'refineCollectionShardKey',\n            'remove',\n            'reshardCollection',\n            'splitChunk',\n            'splitVector',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: '' },\n          actions: [\n            'analyzeShardKey',\n            'changeStream',\n            'clearJumboFlag',\n            'collStats',\n            'configureQueryAnalyzer',\n            'dbHash',\n            'dbStats',\n            'enableSharding',\n            'find',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'indexStats',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'moveChunk',\n            'planCacheRead',\n            'refineCollectionShardKey',\n            'remove',\n            'reshardCollection',\n            'splitChunk',\n            'splitVector',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { cluster: true },\n          actions: [\n            'addShard',\n            'allCollectionStats',\n            'appendOplogNote',\n            'applicationMessage',\n            'auditConfigure',\n            'checkFreeMonitoringStatus',\n            'checkMetadataConsistency',\n            'cleanupOrphaned',\n            'connPoolStats',\n            'connPoolSync',\n            'dropConnections',\n            'flushRouterConfig',\n            'fsync',\n            'getClusterParameter',\n            'getDefaultRWConcern',\n            'getCmdLineOpts',\n            'getLog',\n            'getParameter',\n            'getShardMap',\n            'hostInfo',\n            'inprog',\n            'invalidateUserCache',\n            'killAnyCursor',\n            'killAnySession',\n            'killop',\n            'listDatabases',\n            'listSampledQueries',\n            'listSessions',\n            'listShards',\n            'logRotate',\n            'netstat',\n            'oidcListKeys',\n            'oidcRefreshKeys',\n            'oidReset',\n            'operationMetrics',\n            'telemetryRead',\n            'removeShard',\n            'replSetConfigure',\n            'replSetGetConfig',\n            'replSetGetStatus',\n            'replSetResizeOplog',\n            'replSetStateChange',\n            'resync',\n            'rotateCertificates',\n            'runTenantMigration',\n            'serverStatus',\n            'setClusterParameter',\n            'setDefaultRWConcern',\n            'setFeatureCompatibilityVersion',\n            'setFreeMonitoring',\n            'setParameter',\n            'shardedDataDistribution',\n            'shardingState',\n            'shutdown',\n            'top',\n            'touch',\n            'trafficRecord',\n            'transitionFromDedicatedConfigServer',\n            'transitionToDedicatedConfigServer',\n            'unlock',\n            'useUUID',\n            'setChangeStreamState',\n            'getChangeStreamState'\n          ]\n        },\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'analyzeShardKey',\n            'clearJumboFlag',\n            'collStats',\n            'configureQueryAnalyzer',\n            'dbStats',\n            'dropDatabase',\n            'enableSharding',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'indexStats',\n            'killCursors',\n            'moveChunk',\n            'refineCollectionShardKey',\n            'reshardCollection',\n            'splitChunk',\n            'splitVector'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: 'system.sessions' },\n          actions: [\n            'collStats',\n            'dbStats',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'indexStats'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.replset' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.election' },\n          actions: [ 'find', 'insert', 'remove', 'update' ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.minvalid' },\n          actions: [ 'find', 'insert', 'remove', 'update' ]\n        },\n        {\n          resource: { db: '', collection: 'system.profile' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { system_buckets: '' },\n          actions: [\n            'analyzeShardKey',\n            'clearJumboFlag',\n            'configureQueryAnalyzer',\n            'enableSharding',\n            'moveChunk',\n            'refineCollectionShardKey',\n            'reshardCollection',\n            'splitChunk',\n            'splitVector'\n          ]\n        },\n        {\n          resource: { anyResource: true },\n          actions: [ 'dbCheck', 'exportCollection', 'importCollection' ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.healthlog' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { db: 'config', collection: '' },\n          actions: [\n            'analyzeShardKey',\n            'changeStream',\n            'clearJumboFlag',\n            'collStats',\n            'configureQueryAnalyzer',\n            'dbHash',\n            'dbStats',\n            'enableSharding',\n            'find',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'indexStats',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'moveChunk',\n            'planCacheRead',\n            'refineCollectionShardKey',\n            'remove',\n            'reshardCollection',\n            'splitChunk',\n            'splitVector',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: '' },\n          actions: [\n            'analyzeShardKey',\n            'changeStream',\n            'clearJumboFlag',\n            'collStats',\n            'configureQueryAnalyzer',\n            'dbHash',\n            'dbStats',\n            'enableSharding',\n            'find',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'indexStats',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'moveChunk',\n            'planCacheRead',\n            'refineCollectionShardKey',\n            'remove',\n            'reshardCollection',\n            'splitChunk',\n            'splitVector',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { cluster: true },\n          actions: [\n            'addShard',\n            'allCollectionStats',\n            'appendOplogNote',\n            'applicationMessage',\n            'auditConfigure',\n            'checkFreeMonitoringStatus',\n            'checkMetadataConsistency',\n            'cleanupOrphaned',\n            'connPoolStats',\n            'connPoolSync',\n            'dropConnections',\n            'flushRouterConfig',\n            'fsync',\n            'getClusterParameter',\n            'getDefaultRWConcern',\n            'getCmdLineOpts',\n            'getLog',\n            'getParameter',\n            'getShardMap',\n            'hostInfo',\n            'inprog',\n            'invalidateUserCache',\n            'killAnyCursor',\n            'killAnySession',\n            'killop',\n            'listDatabases',\n            'listSampledQueries',\n            'listSessions',\n            'listShards',\n            'logRotate',\n            'netstat',\n            'oidcListKeys',\n            'oidcRefreshKeys',\n            'oidReset',\n            'operationMetrics',\n            'telemetryRead',\n            'removeShard',\n            'replSetConfigure',\n            'replSetGetConfig',\n            'replSetGetStatus',\n            'replSetResizeOplog',\n            'replSetStateChange',\n            'resync',\n            'rotateCertificates',\n            'runTenantMigration',\n            'serverStatus',\n            'setClusterParameter',\n            'setDefaultRWConcern',\n            'setFeatureCompatibilityVersion',\n            'setFreeMonitoring',\n            'setParameter',\n            'shardedDataDistribution',\n            'shardingState',\n            'shutdown',\n            'top',\n            'touch',\n            'trafficRecord',\n            'transitionFromDedicatedConfigServer',\n            'transitionToDedicatedConfigServer',\n            'unlock',\n            'useUUID',\n            'setChangeStreamState',\n            'getChangeStreamState'\n          ]\n        },\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'analyzeShardKey',\n            'clearJumboFlag',\n            'collStats',\n            'configureQueryAnalyzer',\n            'dbStats',\n            'dropDatabase',\n            'enableSharding',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'indexStats',\n            'killCursors',\n            'moveChunk',\n            'refineCollectionShardKey',\n            'reshardCollection',\n            'splitChunk',\n            'splitVector'\n          ]\n        },\n        {\n          resource: { db: 'config', collection: 'system.sessions' },\n          actions: [\n            'collStats',\n            'dbStats',\n            'getDatabaseVersion',\n            'getShardVersion',\n            'indexStats'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.replset' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.election' },\n          actions: [ 'find', 'insert', 'remove', 'update' ]\n        },\n        {\n          resource: { db: 'local', collection: 'replset.minvalid' },\n          actions: [ 'find', 'insert', 'remove', 'update' ]\n        },\n        {\n          resource: { db: '', collection: 'system.profile' },\n          actions: [ 'find' ]\n        },\n        {\n          resource: { system_buckets: '' },\n          actions: [\n            'analyzeShardKey',\n            'clearJumboFlag',\n            'configureQueryAnalyzer',\n            'enableSharding',\n            'moveChunk',\n            'refineCollectionShardKey',\n            'reshardCollection',\n            'splitChunk',\n            'splitVector'\n          ]\n        },\n        {\n          resource: { anyResource: true },\n          actions: [ 'dbCheck', 'exportCollection', 'importCollection' ]\n        },\n        {\n          resource: { db: 'local', collection: 'system.healthlog' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        }\n      ]\n    },\n    {\n      role: 'readAnyDatabase',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        { resource: { cluster: true }, actions: [ 'listDatabases' ] },\n        {\n          resource: { db: '', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { system_buckets: '' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { db: '', collection: '' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        { resource: { cluster: true }, actions: [ 'listDatabases' ] },\n        {\n          resource: { db: '', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        },\n        {\n          resource: { system_buckets: '' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'dbHash',\n            'dbStats',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        }\n      ]\n    },\n    {\n      role: 'readWrite',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { db: 'admin', collection: '' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'compactStructuredEncryptionData',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead',\n            'remove',\n            'renameCollectionSameDB',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'compactStructuredEncryptionData',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead',\n            'remove',\n            'renameCollectionSameDB',\n            'update'\n          ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { db: 'admin', collection: '' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'compactStructuredEncryptionData',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead',\n            'remove',\n            'renameCollectionSameDB',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'compactStructuredEncryptionData',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead',\n            'remove',\n            'renameCollectionSameDB',\n            'update'\n          ]\n        }\n      ]\n    },\n    {\n      role: 'dbOwner',\n      db: 'admin',\n      isBuiltin: true,\n      roles: [],\n      inheritedRoles: [],\n      privileges: [\n        {\n          resource: { db: 'admin', collection: '' },\n          actions: [\n            'analyze',\n            'bypassDocumentValidation',\n            'changeCustomData',\n            'changePassword',\n            'changeStream',\n            'collMod',\n            'collStats',\n            'compact',\n            'compactStructuredEncryptionData',\n            'configureQueryAnalyzer',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createRole',\n            'createSearchIndexes',\n            'createUser',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropDatabase',\n            'dropIndex',\n            'dropRole',\n            'dropSearchIndex',\n            'dropUser',\n            'enableProfiler',\n            'find',\n            'grantRole',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheIndexFilter',\n            'planCacheRead',\n            'planCacheWrite',\n            'reIndex',\n            'remove',\n            'renameCollectionSameDB',\n            'revokeRole',\n            'setAuthenticationRestriction',\n            'storageDetails',\n            'update',\n            'validate',\n            'viewRole',\n            'viewUser'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'compactStructuredEncryptionData',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead',\n            'remove',\n            'renameCollectionSameDB',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.profile' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'convertToCapped',\n            'createCollection',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        }\n      ],\n      inheritedPrivileges: [\n        {\n          resource: { db: 'admin', collection: '' },\n          actions: [\n            'analyze',\n            'bypassDocumentValidation',\n            'changeCustomData',\n            'changePassword',\n            'changeStream',\n            'collMod',\n            'collStats',\n            'compact',\n            'compactStructuredEncryptionData',\n            'configureQueryAnalyzer',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createRole',\n            'createSearchIndexes',\n            'createUser',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropDatabase',\n            'dropIndex',\n            'dropRole',\n            'dropSearchIndex',\n            'dropUser',\n            'enableProfiler',\n            'find',\n            'grantRole',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheIndexFilter',\n            'planCacheRead',\n            'planCacheWrite',\n            'reIndex',\n            'remove',\n            'renameCollectionSameDB',\n            'revokeRole',\n            'setAuthenticationRestriction',\n            'storageDetails',\n            'update',\n            'validate',\n            'viewRole',\n            'viewUser'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.js' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'compactStructuredEncryptionData',\n            'convertToCapped',\n            'createCollection',\n            'createIndex',\n            'createSearchIndexes',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'dropIndex',\n            'dropSearchIndex',\n            'find',\n            'insert',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'updateSearchIndex',\n            'planCacheRead',\n            'remove',\n            'renameCollectionSameDB',\n            'update'\n          ]\n        },\n        {\n          resource: { db: 'admin', collection: 'system.profile' },\n          actions: [\n            'changeStream',\n            'collStats',\n            'convertToCapped',\n            'createCollection',\n            'dbHash',\n            'dbStats',\n            'dropCollection',\n            'find',\n            'killCursors',\n            'listCollections',\n            'listIndexes',\n            'listSearchIndexes',\n            'planCacheRead'\n          ]\n        }\n      ]\n    }\n  ],\n  ok: 1\n}\n",
  "3.5": "{'admin': {'dbOwner': \"{roles: [\\n    \\n      db: 'admin',\\n      role: 'dbOwner',\\n      roles: [],\\n      inheritedRoles: [],\\n      isBuiltin: true\\n    \\n  ],\\n  ok: 1}\", 'userAdmin': \"{roles: [\\n    \\n      db: 'admin',\\n      role: 'userAdmin',\\n      roles: [],\\n      inheritedRoles: [],\\n      isBuiltin: true\\n    \\n  ],\\n  ok: 1}\", 'userAdminAnyDatabase': \"{roles: [\\n    \\n      db: 'admin',\\n      role: 'userAdminAnyDatabase',\\n      roles: [],\\n      inheritedRoles: [],\\n      isBuiltin: true\\n    \\n  ],\\n  ok: 1}\", 'readWriteAnyDatabase': \"{roles: [\\n    \\n      db: 'admin',\\n      role: 'readWriteAnyDatabase',\\n      roles: [],\\n      inheritedRoles: [],\\n      isBuiltin: true\\n    \\n  ],\\n  ok: 1}\", 'dbAdminAnyDatabase': \"{roles: [\\n    \\n      db: 'admin',\\n      role: 'dbAdminAnyDatabase',\\n      roles: [],\\n      inheritedRoles: [],\\n      isBuiltin: true\\n    \\n  ],\\n  ok: 1}\", 'clusterAdmin': \"{roles: [\\n    \\n      db: 'admin',\\n      role: 'clusterAdmin',\\n      roles: [],\\n      inheritedRoles: [],\\n      isBuiltin: true\\n    \\n  ],\\n  ok: 1}\", 'hostManager': \"{roles: [\\n    \\n      db: 'admin',\\n      role: 'hostManager',\\n      roles: [],\\n      inheritedRoles: [],\\n      isBuiltin: true\\n    \\n  ],\\n  ok: 1}\"}, 'local': {'dbOwner': \"{roles: [\\n    \\n      db: 'local',\\n      role: 'dbOwner',\\n      roles: [],\\n      inheritedRoles: [],\\n      isBuiltin: true\\n    \\n  ],\\n  ok: 1}\", 'userAdmin': \"{roles: [\\n    \\n      db: 'local',\\n      role: 'userAdmin',\\n      roles: [],\\n      inheritedRoles: [],\\n      isBuiltin: true\\n    \\n  ],\\n  ok: 1}\", 'userAdminAnyDatabase': '{roles: [], ok: 1}', 'readWriteAnyDatabase': '{roles: [], ok: 1}', 'dbAdminAnyDatabase': '{roles: [], ok: 1}', 'clusterAdmin': '{roles: [], ok: 1}', 'hostManager': '{roles: [], ok: 1}'}, 'config': {'dbOwner': \"{roles: [\\n    \\n      db: 'config',\\n      role: 'dbOwner',\\n      roles: [],\\n      inheritedRoles: [],\\n      isBuiltin: true\\n    \\n  ],\\n  ok: 1}\", 'userAdmin': \"{roles: [\\n    \\n      db: 'config',\\n      role: 'userAdmin',\\n      roles: [],\\n      inheritedRoles: [],\\n      isBuiltin: true\\n    \\n  ],\\n  ok: 1}\", 'userAdminAnyDatabase': '{roles: [], ok: 1}', 'readWriteAnyDatabase': '{roles: [], ok: 1}', 'dbAdminAnyDatabase': '{roles: [], ok: 1}', 'clusterAdmin': '{roles: [], ok: 1}', 'hostManager': '{roles: [], ok: 1}'}}",
  "4.1": "False",
  "4.2": "False",
  "4.3": "False",
  "4.4": "False",
  "4.5": "False",
  "5.1": "False",
  "5.2": "",
  "5.3": "False",
  "6.1": "False",
  "6.2": "b'\\r\\nHandles NPM(K)  PM(K)  WS(K) CPU(s)    Id SI ProcessName\\r\\n------- ------  -----  ----- ------    -- -- -----------\\r\\n    388     27 372588 121328  34.19 28816  1 mongod     \\r\\n\\r\\n\\r\\n'",
  "6.3": "False",
  "7.1": "False",
  "7.2": "C:\\data\\db1 BUILTIN\\Administrators:(I)(OI)(CI)(F)\n            NT AUTHORITY\\SYSTEM:(I)(OI)(CI)(F)\n            BUILTIN\\Users:(I)(OI)(CI)(RX)\n            NT AUTHORITY\\Authenticated Users:(I)(M)\n            NT AUTHORITY\\Authenticated Users:(I)(OI)(CI)(IO)(M)\n\nSuccessfully processed 1 files; Failed processing 0 files\n"
}
